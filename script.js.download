function createCookie(name, value, days) {
    var expires;

    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toGMTString();
    } else {
        expires = "";
    }
    document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value) + expires + "; path=/";
}

function readCookie(name) {
    var nameEQ = encodeURIComponent(name) + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ')
            c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0)
            return decodeURIComponent(c.substring(nameEQ.length, c.length));
    }
    return null;
}

function eraseCookie(name) {
    createCookie(name, "", -1);
}

function toggle_group(group_row){
  $("."+group_row).toggle();
}

function replaceAll(txt, replace, with_this) {
  return txt.replace(new RegExp(replace, 'g'),with_this);
}

function addCommas(nStr)
{
	nStr += '';
	x = nStr.split('.');
	x1 = x[0];
	x2 = x.length > 1 ? '.' + x[1] : '';
	var rgx = /(\d+)(\d{3})/;
	while (rgx.test(x1)) {
		x1 = x1.replace(rgx, '$1' + ',' + '$2');
	}
	return x1 + x2;
}

function select_all(form){
	for (var i=0; i<form.elements.length; i++){
		if(form.elements[i].type == "checkbox")
			form.elements[i].checked = true;
	}
	form.select_all.checked = true;
}

function deselect_all(form){
	for (var i=0; i<form.elements.length; i++){
		if(form.elements[i].type == "checkbox")
			form.elements[i].checked = false;
	}
	form.select_all.checked = false;
}

function change_select_all(form){
	if(form.select_all.checked == false)
		deselect_all(form);
	else
		select_all(form);
}


function limitText(limitField, limitCount, limitNum) {
	if (limitField.value.length > limitNum) {
		limitField.value = limitField.value.substring(0, limitNum);
	} else {
		limitCount.value = limitNum - limitField.value.length;
	}
}


function checkuser(form)
{
	if (form.UserName.value == "") { alert( "Username is required." ); return false ;}
	if (form.Password.value == "") { alert( " Password is required." ); return false ;}
	if (form.Confirm_Password.value == "") { alert( " Confirm Password is required." ); return false ;}
	if(form.Password.value != form.Confirm_Password.value ) { alert ("Password and Comfirm password must be the same!"); return false;}
	if (form.Name.value == "") { alert( " Name is required." ); return false ;}
	if (form.LastName.value == "") { alert( " Lastname is required." ); return false ;}
	if (form.Phone_Number.value == "") { alert( " Phone Number is required." ); return false ;}
	else{
		var x = form.Phone_Number.value;
		var filter  = /^(-)?(\d*)(\.?)(\d*)$/;
		if (filter.test(x) == false){alert('Phone_Number must be numeric!!'); return false;}
	}
	
	if (form.Email_Address.value == "") { 
		alert( " Email is required." );
		return false ;}
	else if (form.Email_Address.value != ""){
		var x = form.Email_Address.value;
		var filter  = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
		if (filter.test(x)==false){ alert("Incorrect Email Address"); return false;}
	}
	if (form.Type.value == "") { alert( " Type is required." ); return false ;}
	if (form.Policy_ID.value == "") { alert( " Policy is required." ); return false ;}
	return true ;
}


function checkMail()
{
	var x = form.email.value;
	var filter  = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
	if (filter.test(x)) return true;
	else return false;
}

function IsNumeric(strString)
{
   var strValidChars = "0123456789.-";
   var strChar;
   var blnResult = true;

   if (strString.length == 0) return false;
   for (i = 0; i < strString.length && blnResult == true; i++){
      strChar = strString.charAt(i);
      if (strValidChars.indexOf(strChar) == -1)
         {
         blnResult = false;
         }
      }
   return blnResult;
}


function check_number(strString)
{
   var strValidChars = "0123456789.-";
   var strChar;
   var blnResult = true;

   if (strString.length == 0) return false;
   for (i = 0; i < strString.length && blnResult == true; i++){
      strChar = strString.charAt(i);
      if (strValidChars.indexOf(strChar) == -1)
         {
         blnResult = false;
         }
      }
   return blnResult;
}

function check_english(strString)
{
  var x = strString;
	var filter  = /^[a-zA-Z0-9 !@#\$%\^\&*\)\(\?\>\<\]\[\}\{\\\/\"+=._;:,-]+$/g
	if (filter.test(x)) return true;
	else return false;
}


function check_cit_id(input){
	var re= /^$|^\d{13}$/;
	return re.test(input);
}
function check_mobile_no(input){
	var re= /^$|^\d{10}$/;
	return re.test(input);
}
function check_email(input){
	var re = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;
    return re.test(input);
}
function check_postal_code(input){
  var re= /^$|^\d{5}$/;
  return re.test(input);
}

function check_ontype_english(event){
  // Disallow anything not matching the regex pattern (A to Z uppercase, a to z lowercase, digits 0 to 9 and white space)
    // For more on JavaScript Regular Expressions, look here: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions
    var englishAlphabetDigitsAndWhiteSpace = /^[a-zA-Z0-9 !@#\$%\^\&*\)\(\?\>\<\]\[\}\{\\\/\"+=._;:,-]+$/g
   
    // Retrieving the key from the char code passed in event.which
    // For more info on even.which, look here: http://stackoverflow.com/q/3050984/114029
    var key = String.fromCharCode(event.which);
    
    //alert(event.keyCode);
    
    // For the keyCodes, look here: http://stackoverflow.com/a/3781360/114029
    // keyCode == 8  is backspace
    // keyCode == 9  is tab
    // keyCode == 13 is enter
    // keyCode == 27 is escape
    // keyCode == 37 is left arrow
    // keyCode == 38 is up arrow
    // keyCode == 39 is right arrow
    // keyCode == 40 is down arrow
    // englishAlphabetDigitsAndWhiteSpace.test(key) does the matching, that is, test the key just typed against the regex pattern
    if (event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 13  || event.keyCode == 27 
      || event.keyCode == 37 || event.keyCode == 38 || event.keyCode == 39 || event.keyCode == 40 
      || englishAlphabetDigitsAndWhiteSpace.test(key)) {
        return true;
    }

    // If we got this far, just return false because a disallowed key was typed.
    return false;
}


function check_ontype_integer(event){
  // Disallow anything not matching the regex pattern (A to Z uppercase, a to z lowercase, digits 0 to 9 and white space)
    // For more on JavaScript Regular Expressions, look here: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions
    var integer_only = /^[0-9-]+$/g
   
    // Retrieving the key from the char code passed in event.which
    // For more info on even.which, look here: http://stackoverflow.com/q/3050984/114029
    var key = String.fromCharCode(event.which);
    
    //alert(event.keyCode);
    
    // For the keyCodes, look here: http://stackoverflow.com/a/3781360/114029
    // keyCode == 8  is backspace
    // keyCode == 9  is tab
    // keyCode == 13 is enter
    // keyCode == 27 is escape
    // keyCode == 37 is left arrow
    // keyCode == 38 is up arrow
    // keyCode == 39 is right arrow
    // keyCode == 40 is down arrow
    // englishAlphabetDigitsAndWhiteSpace.test(key) does the matching, that is, test the key just typed against the regex pattern
    if (event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 13  || event.keyCode == 27 
      || event.keyCode == 37 || event.keyCode == 38 || event.keyCode == 39 || event.keyCode == 40 
      || integer_only.test(key)) {
        return true;
    }

    // If we got this far, just return false because a disallowed key was typed.
    return false;
}


function check_ontype_positive_integer(event){
  // Disallow anything not matching the regex pattern (A to Z uppercase, a to z lowercase, digits 0 to 9 and white space)
    // For more on JavaScript Regular Expressions, look here: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions
    var integer_only = /^[0-9,]+$/g
   
    // Retrieving the key from the char code passed in event.which
    // For more info on even.which, look here: http://stackoverflow.com/q/3050984/114029
    var key = String.fromCharCode(event.which);
    
    //alert(event.keyCode);
    
    // For the keyCodes, look here: http://stackoverflow.com/a/3781360/114029
    // keyCode == 8  is backspace
    // keyCode == 9  is tab
    // keyCode == 13 is enter
    // keyCode == 27 is escape
    // keyCode == 37 is left arrow
    // keyCode == 38 is up arrow
    // keyCode == 39 is right arrow
    // keyCode == 40 is down arrow
    // englishAlphabetDigitsAndWhiteSpace.test(key) does the matching, that is, test the key just typed against the regex pattern
    if (event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 13  || event.keyCode == 27 
      || event.keyCode == 37 || event.keyCode == 38 || event.keyCode == 39 || event.keyCode == 40 
      || integer_only.test(key)) {
        return true;
    }

    // If we got this far, just return false because a disallowed key was typed.
    return false;
}


function check_ontype_number(event){
  // Disallow anything not matching the regex pattern (A to Z uppercase, a to z lowercase, digits 0 to 9 and white space)
    // For more on JavaScript Regular Expressions, look here: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions
    var number_only = /^[0-9.-]+$/g
   
    // Retrieving the key from the char code passed in event.which
    // For more info on even.which, look here: http://stackoverflow.com/q/3050984/114029
    var key = String.fromCharCode(event.which);
    
    //alert(event.keyCode);
    
    // For the keyCodes, look here: http://stackoverflow.com/a/3781360/114029
    // keyCode == 8  is backspace
    // keyCode == 9  is tab
    // keyCode == 13 is enter
    // keyCode == 27 is escape
    // keyCode == 37 is left arrow
    // keyCode == 38 is up arrow
    // keyCode == 39 is right arrow
    // keyCode == 40 is down arrow
    // englishAlphabetDigitsAndWhiteSpace.test(key) does the matching, that is, test the key just typed against the regex pattern
    if (event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 13  || event.keyCode == 27 
      || event.keyCode == 37 || event.keyCode == 38 || event.keyCode == 39 || event.keyCode == 40 
      || number_only.test(key)) {
        return true;
    }

    // If we got this far, just return false because a disallowed key was typed.
    return false;
}

function check_ontype_positive_number(event){
  // Disallow anything not matching the regex pattern (A to Z uppercase, a to z lowercase, digits 0 to 9 and white space)
    // For more on JavaScript Regular Expressions, look here: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions
    var number_only = /^[0-9.]+$/g
   
    // Retrieving the key from the char code passed in event.which
    // For more info on even.which, look here: http://stackoverflow.com/q/3050984/114029
    var key = String.fromCharCode(event.which);
    
    //alert(event.keyCode);
    
    // For the keyCodes, look here: http://stackoverflow.com/a/3781360/114029
    // keyCode == 8  is backspace
    // keyCode == 9  is tab
    // keyCode == 13 is enter
    // keyCode == 27 is escape
    // keyCode == 37 is left arrow
    // keyCode == 38 is up arrow
    // keyCode == 39 is right arrow
    // keyCode == 40 is down arrow
    // englishAlphabetDigitsAndWhiteSpace.test(key) does the matching, that is, test the key just typed against the regex pattern
    if (event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 13  || event.keyCode == 27 
      || event.keyCode == 37 || event.keyCode == 38 || event.keyCode == 39 || event.keyCode == 40 
      || number_only.test(key)) {
        return true;
    }

    // If we got this far, just return false because a disallowed key was typed.
    return false;
}

function pad_left (str, max) {
  str = str.toString();
  return str.length < max ? pad_left("0" + str, max) : str;
}

function pad_right (str, max) {
  str = str.toString();
  return str.length < max ? pad_right(str + "0", max) : str;
}

function number_format(number){
  return number.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');;
}

// "use strict";

function ThaiNumberToText(Number)
{
  Number = Number.replace (/๐/gi,'0');  
  Number = Number.replace (/๑/gi,'1');  
  Number = Number.replace (/๒/gi,'2');
  Number = Number.replace (/๓/gi,'3');
  Number = Number.replace (/๔/gi,'4');
  Number = Number.replace (/๕/gi,'5');
  Number = Number.replace (/๖/gi,'6');
  Number = Number.replace (/๗/gi,'7');
  Number = Number.replace (/๘/gi,'8');
  Number = Number.replace (/๙/gi,'9');
  return  ArabicNumberToText(Number);
}

function ArabicNumberToText(Number)
{
  var Number = CheckNumber(Number);
  var NumberArray = new Array ("ศูนย์", "หนึ่ง", "สอง", "สาม", "สี่", "ห้า", "หก", "เจ็ด", "แปด", "เก้า", "สิบ");
  var DigitArray = new Array ("", "สิบ", "ร้อย", "พัน", "หมื่น", "แสน", "ล้าน");
  var BahtText = "";
  if (isNaN(Number))
  {
    return "ข้อมูลนำเข้าไม่ถูกต้อง";
  } else
  {
    if ((Number - 0) > 9999999.9999)
    {
      return "ข้อมูลนำเข้าเกินขอบเขตที่ตั้งไว้";
    } else
    {
      Number = Number.split (".");
      if (Number[1].length > 0)
      {
        Number[1] = Number[1].substring(0, 2);
      }
      var NumberLen = Number[0].length - 0;
      for(var i = 0; i < NumberLen; i++)
      {
        var tmp = Number[0].substring(i, i + 1) - 0;
        if (tmp != 0)
        {
          if ((i == (NumberLen - 1)) && (tmp == 1))
          {
            BahtText += "เอ็ด";
          } else
          if ((i == (NumberLen - 2)) && (tmp == 2))
          {
            BahtText += "ยี่";
          } else
          if ((i == (NumberLen - 2)) && (tmp == 1))
          {
            BahtText += "";
          } else
          {
            BahtText += NumberArray[tmp];
          }
          BahtText += DigitArray[NumberLen - i - 1];
        }
      }
      BahtText += "บาท";
      if ((Number[1] == "0") || (Number[1] == "00"))
      {
        BahtText += "ถ้วน";
      } else
      {
        DecimalLen = Number[1].length - 0;
        for (var i = 0; i < DecimalLen; i++)
        {
          var tmp = Number[1].substring(i, i + 1) - 0;
          if (tmp != 0)
          {
            if ((i == (DecimalLen - 1)) && (tmp == 1))
            {
              BahtText += "เอ็ด";
            } else
            if ((i == (DecimalLen - 2)) && (tmp == 2))
            {
              BahtText += "ยี่";
            } else
            if ((i == (DecimalLen - 2)) && (tmp == 1))
            {
              BahtText += "";
            } else
            {
              BahtText += NumberArray[tmp];
            }
            BahtText += DigitArray[DecimalLen - i - 1];
          }
        }
        BahtText += "สตางค์";
      }
      return BahtText;
    }
  }
}

function CheckNumber(Number){
  var decimal = false;
  Number = Number.toString();           
  Number = Number.replace (/ |,|บาท|฿/gi,'');     
  for (var i = 0; i < Number.length; i++)
  {
    if(Number[i] =='.'){
      decimal = true;
    }
  }
  if(decimal == false){
    Number = Number+'.00';
  }
  return Number
}


function ReadArabicNumber(Number)
{
  var Number = CheckNumber(Number);
  var NumberArray = new Array ("ศูนย์", "หนึ่ง", "สอง", "สาม", "สี่", "ห้า", "หก", "เจ็ด", "แปด", "เก้า", "สิบ");
  var DigitArray = new Array ("", "สิบ", "ร้อย", "พัน", "หมื่น", "แสน", "ล้าน");
  var BahtText = "";
  if (isNaN(Number))
  {
    return "ข้อมูลนำเข้าไม่ถูกต้อง";
  } else
  {
    if ((Number - 0) > 9999999.9999)
    {
      return "ข้อมูลนำเข้าเกินขอบเขตที่ตั้งไว้";
    } else
    {
      Number = Number.split (".");
      if (Number[1].length > 0)
      {
        Number[1] = Number[1].substring(0, 2);
      }
      var NumberLen = Number[0].length - 0;
      for(var i = 0; i < NumberLen; i++)
      {
        var tmp = Number[0].substring(i, i + 1) - 0;
        if (tmp != 0)
        {
          if ((i == (NumberLen - 1)) && (tmp == 1))
          {
            BahtText += "เอ็ด";
          } else
          if ((i == (NumberLen - 2)) && (tmp == 2))
          {
            BahtText += "ยี่";
          } else
          if ((i == (NumberLen - 2)) && (tmp == 1))
          {
            BahtText += "";
          } else
          {
            BahtText += NumberArray[tmp];
          }
          BahtText += DigitArray[NumberLen - i - 1];
        }
      }
      //BahtText += "บาท";
      if ((Number[1] == "0") || (Number[1] == "00"))
      {
        //BahtText += "ถ้วน";
      } else
      {
        DecimalLen = Number[1].length - 0;
        for (var i = 0; i < DecimalLen; i++)
        {
          var tmp = Number[1].substring(i, i + 1) - 0;
          if (tmp != 0)
          {
            if ((i == (DecimalLen - 1)) && (tmp == 1))
            {
              BahtText += "เอ็ด";
            } else
            if ((i == (DecimalLen - 2)) && (tmp == 2))
            {
              BahtText += "ยี่";
            } else
            if ((i == (DecimalLen - 2)) && (tmp == 1))
            {
              BahtText += "";
            } else
            {
              BahtText += NumberArray[tmp];
            }
            BahtText += DigitArray[DecimalLen - i - 1];
          }
        }
        //BahtText += "สตางค์";
      }
      return BahtText;
    }
  }
}

function create_suneditor_classic(id){
  var suneditor = SUNEDITOR.create(id, {
    display: 'block',
    width: '100%',
    height: 'auto',
    defaultStyle: "font-size:16px;",
    popupDisplay: 'full',
    charCounter: true,
    charCounterLabel: 'Characters :',
    buttonList: [
        // default
        ['undo', 'redo'],
        //['font', 'fontSize', 'formatBlock'],
        //['paragraphStyle', 'blockquote'],
        ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript'],
        ['fontColor', 'hiliteColor'], //, 'textStyle'
        //['removeFormat'],
        ['outdent', 'indent'],
        ['align', 'horizontalRule', 'list', 'lineHeight'],
        ['table', 'link', 'image', 'math'], //, 'video', 'audio'
        ['codeView'],
        //['imageGallery'],
        //['fullScreen', 'showBlocks', 'codeView'],
        //['preview', 'print'],
        //['save', 'template'],
        // (min-width: 1546)
        ['%1546', [
            ['undo', 'redo'],
            //['font', 'fontSize', 'formatBlock'],
            //['paragraphStyle', 'blockquote'],
            ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript'],
            ['fontColor', 'hiliteColor'], //, 'textStyle'
            //['removeFormat'],
            ['outdent', 'indent'],
            ['align', 'horizontalRule', 'list', 'lineHeight'],
            ['table', 'link', 'image', 'math'], //, 'video', 'audio'
            ['codeView'],
            //['imageGallery'],
            //['fullScreen', 'showBlocks', 'codeView'],
            //['-right', ':i-More Misc-default.more_vertical', 'preview', 'print', 'save', 'template']
        ]],
        // (min-width: 1455)
        ['%1455', [
            ['undo', 'redo'],
            //['font', 'fontSize', 'formatBlock'],
            //['paragraphStyle', 'blockquote'],
            ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript'],
            ['fontColor', 'hiliteColor'], //, 'textStyle'
            //['removeFormat'],
            ['outdent', 'indent'],
            ['align', 'horizontalRule', 'list', 'lineHeight'],
            ['table', 'link', 'image', 'math'], //, 'video', 'audio'
            ['codeView'],
            //['imageGallery'],
            //['-right', ':i-More Misc-default.more_vertical', 'fullScreen', 'showBlocks', 'codeView', 'preview', 'print', 'save', 'template']
        ]],
        // (min-width: 1326)
        ['%1326', [
            ['undo', 'redo'],
            //['font', 'fontSize', 'formatBlock'],
            //['paragraphStyle', 'blockquote'],
            ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript'],
            ['fontColor', 'hiliteColor'], //, 'textStyle'
            //['removeFormat'],
            ['outdent', 'indent'],
            ['align', 'horizontalRule', 'list', 'lineHeight'],
            ['table', 'link', 'image', 'math'], //, 'video', 'audio'
            ['codeView'],
            //['-right', ':i-More Misc-default.more_vertical', 'fullScreen', 'showBlocks', 'codeView', 'preview', 'print', 'save', 'template'],
            //['-right', ':r-More Rich-default.more_plus', 'table', 'link', 'image', 'video', 'audio', 'math'] //, 'imageGallery'
        ]],
        // (min-width: 1123)
        ['%1123', [
            ['undo', 'redo'],
            //[':p-More Paragraph-default.more_paragraph', 'font', 'fontSize', 'formatBlock', 'paragraphStyle', 'blockquote'],
            ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript'],
            ['fontColor', 'hiliteColor'], //, 'textStyle'
            //['removeFormat'],
            ['outdent', 'indent'],
            ['align', 'horizontalRule', 'list', 'lineHeight'],
            ['table', 'link', 'image', 'math'], //, 'video', 'audio'
            ['codeView'],
            //['-right', ':i-More Misc-default.more_vertical', 'fullScreen', 'showBlocks', 'codeView', 'preview', 'print', 'save', 'template'],
            //['-right', ':r-More Rich-default.more_plus', 'table', 'link', 'image', 'video', 'audio', 'math']//, 'imageGallery'
        ]],
        // (min-width: 817)
        ['%817', [
            ['undo', 'redo'],
            //[':p-More Paragraph-default.more_paragraph', 'font', 'fontSize', 'formatBlock', 'paragraphStyle', 'blockquote'],
            ['bold', 'underline', 'italic', 'strike'],
            [':t-More Text-default.more_text', 'subscript', 'superscript', 'fontColor', 'hiliteColor'], //, 'textStyle'
            //['removeFormat'],
            ['outdent', 'indent'],
            ['align', 'horizontalRule', 'list', 'lineHeight'],
            //['-right', ':i-More Misc-default.more_vertical', 'fullScreen', 'showBlocks', 'codeView', 'preview', 'print', 'save', 'template'],
            ['-right', ':r-More Rich-default.more_plus', 'table', 'link', 'image', 'math'], //, 'video', 'audio', 'imageGallery'
            ['codeView'],
        ]],
        // (min-width: 673)
        ['%673', [
            ['undo', 'redo'],
            //[':p-More Paragraph-default.more_paragraph', 'font', 'fontSize', 'formatBlock', 'paragraphStyle', 'blockquote'],
            [':t-More Text-default.more_text', 'bold', 'underline', 'italic', 'strike', 'subscript', 'superscript', 'fontColor', 'hiliteColor'], //, 'textStyle'
            //['removeFormat'],
            ['outdent', 'indent'],
            ['align', 'horizontalRule', 'list', 'lineHeight'],
            [':r-More Rich-default.more_plus', 'table', 'link', 'image', 'math'], //, 'video', 'audio', 'imageGallery'
            //['-right', ':i-More Misc-default.more_vertical', 'fullScreen', 'showBlocks', 'codeView', 'preview', 'print', 'save', 'template']
            ['codeView'],
        ]],
        // (min-width: 525)
        ['%525', [
            ['undo', 'redo'],
            //[':p-More Paragraph-default.more_paragraph', 'font', 'fontSize', 'formatBlock', 'paragraphStyle', 'blockquote'],
            [':t-More Text-default.more_text', 'bold', 'underline', 'italic', 'strike', 'subscript', 'superscript', 'fontColor', 'hiliteColor'], //, 'textStyle'
            //['removeFormat'],
            ['outdent', 'indent'],
            [':e-More Line-default.more_horizontal', 'align', 'horizontalRule', 'list', 'lineHeight'],
            [':r-More Rich-default.more_plus', 'table', 'link', 'image', 'math'], //, 'video', 'audio', 'imageGallery'
            //['-right', ':i-More Misc-default.more_vertical', 'fullScreen', 'showBlocks', 'codeView', 'preview', 'print', 'save', 'template']
            ['codeView'],
        ]],
        // (min-width: 420)
        ['%420', [
            ['undo', 'redo'],
            //[':p-More Paragraph-default.more_paragraph', 'font', 'fontSize', 'formatBlock', 'paragraphStyle', 'blockquote'],
            [':t-More Text-default.more_text', 'bold', 'underline', 'italic', 'strike', 'subscript', 'superscript', 'fontColor', 'hiliteColor'], //, 'textStyle', 'removeFormat'
            [':e-More Line-default.more_horizontal', 'outdent', 'indent', 'align', 'horizontalRule', 'list', 'lineHeight'],
            [':r-More Rich-default.more_plus', 'table', 'link', 'image', 'math'], //, 'video', 'audio', 'imageGallery'
            //['-right', ':i-More Misc-default.more_vertical', 'fullScreen', 'showBlocks', 'codeView', 'preview', 'print', 'save', 'template']
            ['codeView'],
        ]]
    ],
    placeholder: '',
    katex: katex
  });

  return suneditor;
}

function create_suneditor_inline(id){
  var suneditor = SUNEDITOR.create(id, {
      mode: 'inline',
      display: 'block',
      width: '100%',
      height: 'auto',
      defaultStyle: "font-size:16px;",
      popupDisplay: 'full',
      buttonList: [
          ['undo', 'redo'],
          //['font', 'fontSize', 'formatBlock'],
          //['paragraphStyle', 'blockquote'],
          ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript'],
          ['fontColor', 'hiliteColor'], //, 'textStyle'
          //['removeFormat'],
          ['outdent', 'indent'],
          ['align', 'horizontalRule', 'list', 'lineHeight'],
          ['table', 'link', 'image', 'math'], //, 'video', 'audio'
          ['codeView'],
      ],
      placeholder: '',
      katex: katex
  });
  return suneditor;
}